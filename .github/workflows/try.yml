name: try
on: 
  pull_request:

jobs:
  terraform-network:
    name: Terraform Network Plan and Apply
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-1"

    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.4

      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform init
        id: init
        run: terraform init 

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan 
        id: plan
        run: terraform plan -out=devops.plan.tfout -no-color

      - name: Save Terraform Plan File
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
        uses: actions/upload-artifact@v3
        with:
          name: "terraform-plan-file-${{ github.event.pull_request.number }}-1.tfout"
          path: devops.plan.tfout
          retention-days: 5

  merge:
    if: (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-1"
    steps:
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.4

      - name: Download Terraform Plan File
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact1 = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "terraform-plan-file-${{ github.event.pull_request.number }}-1.tfout"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact1.id,
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/artifact1.zip`, Buffer.from(download.data));

      - name: Unzip artifact1
        run: unzip artifact1.zip

      - name: Unzip artifact2
        run: unzip artifact2.zip
